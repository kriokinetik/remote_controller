import asyncio
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, BufferedInputFile

import tools
from tools.logger import logger_event_info, logger_error
from bot import keyboards
from bot.states import DataStates
from bot.handlers.subhandlers.files import navigate_to_path
from bot.filters import BotAccessFilter
from config import SCREENSHOT_NAME, PAGE_SIZE

router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"), BotAccessFilter())
async def send_remote_controller_handler(message: Message):
    logger_event_info(message)

    await message.answer(text="remote controller", reply_markup=keyboards.home.main_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
@router.callback_query(F.data == "screenshot")
async def send_screenshot_handler(callback: CallbackQuery):
    logger_event_info(callback)

    with tools.screenshot.overlay_cursor_on_screenshot(False) as image:
        image.seek(0)
        await callback.message.answer_document(document=BufferedInputFile(file=image.read(),
                                                                          filename=SCREENSHOT_NAME),
                                               caption="üñº Screenshot captured",
                                               disable_content_type_detection=True)

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø—É–ª—å—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –º—ã—à—å—é
@router.callback_query(F.data == "input_controls")
async def send_input_controls_handler(callback: CallbackQuery, state: FSMContext):
    logger_event_info(callback)

    await callback.message.edit_text(text="–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏ –º—ã—à—å", reply_markup=keyboards.input.input_controls)
    await callback.answer("")
    await callback.message.edit_text(text=f"Mouse & Keyboard",
    if await state.get_state() is not None:
        await state.set_state(state=None)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
@router.callback_query(F.data == "main")
async def send_main_window_handler(callback: CallbackQuery, state: FSMContext):
    logger_event_info(callback)

    await callback.message.edit_text(text="remote controller", reply_markup=keyboards.home.main_keyboard)
    await callback.answer("")
    if await state.get_state() is not None:
        await state.set_state(state=None)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞
@router.callback_query(F.data == "retrieve_file")
async def retrieve_file_menu_handler(callback: CallbackQuery, state: FSMContext):
    logger_event_info(callback)

    desktop_path = tools.file_ops.get_desktop_path()
    await navigate_to_path(callback, state, desktop_path)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É
    await state.set_state(DataStates.path)

    await callback.answer()


async def run_speedtest(message: Message):
    try:
        download, upload = await tools.speedtest.speed_test()
        await message.edit_text(f"üåê Internet Speed Test Results\n\n"
                                f"‚¨áÔ∏è <code>Download: {download}ps</code>\n"
                                f"‚¨ÜÔ∏è <code>Upload: {upload}ps</code>")
    except Exception as e:
        await message.edit_text(f"‚ùå Speed test failed: {e}")
        logger_error(e, exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
@router.callback_query(F.data == "speed_test")
async def send_speed_test_handler(callback: CallbackQuery):
    logger_event_info(callback)

    message = await callback.message.answer("üîÑ Running Internet Speed Test...")
    await callback.answer()

    asyncio.create_task(run_speedtest(message))

    await callback.answer("Uploading...")
